package ie.ncirl.container.manager.library.configurevm;

import java.util.ArrayList;

import org.junit.Assert;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ie.ncirl.container.manager.library.configurevm.constants.VMConstants;
import ie.ncirl.container.manager.library.configurevm.exception.DockerException;

public class VMConfigureTest {

	public static final String USERNAME = "ec2-user";
	public static final byte[] privateKey = { 45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 82, 83, 65, 32, 80, 82, 73, 86, 65, 84, 69, 32, 75, 69, 89, 45, 45, 45, 45, 45, 13, 10, 77, 73, 73, 69, 111, 119, 73, 66, 65, 65, 75, 67, 65, 81, 69, 65, 108,
			47, 115, 122, 119, 43, 80, 122, 97, 119, 84, 90, 108, 89, 55, 104, 70, 74, 71, 89, 53, 101, 107, 51, 98, 73, 65, 48, 100, 48, 116, 43, 82, 121, 73, 117, 103, 112, 104, 85, 107, 72, 79, 114, 90, 100, 75, 84, 122, 108, 121, 116, 51, 122,
			107, 78, 83, 57, 109, 70, 13, 10, 73, 57, 65, 78, 106, 118, 118, 82, 112, 100, 54, 90, 106, 114, 99, 111, 98, 70, 116, 107, 51, 70, 89, 48, 65, 115, 105, 111, 76, 84, 71, 116, 75, 103, 74, 81, 78, 118, 84, 50, 67, 80, 120, 54, 117, 50,
			48, 52, 119, 68, 102, 82, 99, 100, 97, 75, 86, 84, 55, 54, 103, 57, 104, 75, 78, 72, 90, 116, 66, 110, 68, 112, 119, 114, 48, 43, 13, 10, 117, 106, 81, 69, 66, 80, 54, 57, 113, 75, 102, 104, 56, 47, 48, 70, 100, 86, 82, 76, 83, 120, 75,
			79, 66, 47, 84, 111, 80, 50, 54, 73, 90, 111, 77, 89, 103, 65, 83, 52, 105, 98, 90, 51, 101, 110, 120, 50, 100, 67, 65, 77, 74, 113, 107, 73, 113, 71, 51, 69, 97, 120, 70, 111, 86, 43, 101, 71, 83, 98, 120, 88, 48, 104, 67, 97, 13, 10,
			75, 49, 105, 49, 112, 118, 109, 101, 86, 90, 69, 107, 43, 87, 114, 105, 84, 72, 117, 43, 108, 113, 56, 43, 101, 43, 76, 52, 122, 79, 106, 112, 69, 84, 110, 122, 111, 66, 76, 51, 66, 97, 115, 76, 73, 79, 68, 56, 121, 51, 72, 112, 81, 84,
			48, 89, 76, 108, 120, 47, 99, 54, 82, 90, 106, 52, 122, 83, 79, 43, 110, 107, 100, 52, 72, 50, 13, 10, 56, 116, 48, 55, 72, 69, 115, 75, 101, 102, 77, 112, 122, 78, 108, 109, 110, 86, 87, 107, 89, 100, 121, 85, 78, 65, 101, 119, 55, 69,
			102, 47, 71, 90, 109, 100, 121, 106, 74, 55, 77, 80, 87, 74, 112, 115, 51, 66, 101, 112, 87, 83, 108, 119, 73, 68, 65, 81, 65, 66, 65, 111, 73, 66, 65, 71, 100, 68, 98, 106, 79, 117, 81, 87, 107, 52, 13, 10, 110, 87, 74, 74, 57, 49, 76,
			84, 98, 112, 68, 103, 101, 105, 69, 70, 112, 121, 66, 98, 77, 103, 122, 66, 65, 57, 115, 71, 66, 52, 99, 121, 111, 73, 87, 74, 111, 53, 88, 50, 85, 77, 107, 51, 54, 88, 110, 99, 55, 79, 75, 100, 98, 87, 106, 50, 88, 115, 99, 86, 122, 84,
			52, 122, 52, 111, 112, 108, 79, 115, 50, 101, 52, 75, 51, 51, 13, 10, 105, 112, 86, 83, 105, 72, 98, 102, 112, 89, 77, 66, 119, 57, 51, 116, 78, 114, 76, 56, 106, 105, 47, 69, 102, 86, 71, 99, 49, 78, 99, 65, 43, 74, 80, 50, 116, 77, 121,
			97, 110, 111, 57, 101, 122, 117, 88, 98, 85, 98, 67, 81, 119, 82, 53, 110, 117, 53, 80, 74, 112, 102, 80, 121, 117, 101, 43, 122, 101, 52, 107, 104, 114, 86, 70, 111, 13, 10, 114, 82, 106, 85, 85, 71, 100, 100, 112, 89, 103, 105, 70, 47,
			121, 87, 56, 108, 83, 115, 55, 48, 68, 97, 77, 117, 100, 79, 50, 102, 84, 121, 102, 111, 121, 97, 47, 77, 98, 75, 109, 57, 85, 78, 68, 77, 52, 73, 66, 82, 110, 77, 106, 52, 108, 85, 98, 104, 86, 113, 82, 76, 114, 101, 77, 99, 110, 52,
			110, 108, 88, 72, 66, 90, 85, 80, 13, 10, 114, 85, 101, 83, 73, 97, 55, 72, 81, 51, 65, 90, 78, 87, 102, 81, 98, 79, 69, 86, 65, 106, 122, 120, 75, 65, 66, 79, 107, 67, 116, 51, 113, 80, 99, 110, 114, 50, 116, 55, 104, 56, 118, 72, 48,
			110, 79, 77, 51, 121, 54, 47, 80, 76, 108, 71, 109, 53, 113, 69, 50, 121, 53, 55, 81, 80, 88, 86, 115, 77, 57, 101, 50, 77, 105, 50, 13, 10, 68, 102, 101, 105, 52, 54, 56, 114, 118, 97, 121, 97, 49, 76, 99, 51, 89, 72, 110, 67, 72, 85,
			101, 109, 102, 51, 69, 67, 103, 89, 69, 65, 121, 67, 73, 104, 52, 115, 54, 50, 89, 69, 98, 85, 114, 76, 51, 65, 115, 109, 56, 114, 47, 78, 100, 109, 43, 80, 112, 88, 107, 55, 111, 43, 89, 119, 114, 90, 51, 89, 85, 101, 87, 87, 69, 111,
			13, 10, 77, 100, 109, 98, 84, 114, 101, 84, 65, 52, 72, 90, 49, 105, 80, 80, 89, 89, 80, 71, 70, 110, 117, 119, 110, 76, 106, 122, 89, 81, 108, 73, 116, 54, 79, 99, 118, 82, 97, 83, 77, 70, 57, 87, 85, 102, 99, 47, 79, 53, 97, 120, 115,
			118, 108, 90, 78, 51, 109, 52, 77, 108, 107, 118, 85, 111, 57, 78, 85, 99, 100, 90, 117, 110, 53, 77, 13, 10, 74, 78, 74, 108, 106, 98, 49, 83, 54, 56, 110, 55, 79, 115, 90, 76, 97, 57, 119, 72, 101, 55, 74, 55, 119, 84, 51, 57, 83, 89,
			105, 66, 73, 83, 56, 50, 121, 105, 113, 85, 50, 115, 88, 68, 102, 80, 70, 107, 113, 69, 107, 67, 103, 89, 69, 65, 119, 109, 103, 75, 103, 54, 81, 48, 113, 82, 101, 88, 118, 75, 110, 75, 101, 87, 69, 121, 13, 10, 83, 105, 71, 54, 115, 110,
			54, 99, 48, 66, 84, 69, 102, 109, 55, 52, 99, 53, 82, 87, 48, 53, 66, 56, 57, 85, 48, 68, 50, 78, 50, 76, 54, 48, 85, 86, 111, 109, 82, 50, 69, 86, 74, 114, 75, 100, 110, 55, 77, 74, 70, 81, 112, 119, 50, 120, 69, 116, 79, 90, 101, 103,
			89, 43, 97, 76, 53, 83, 112, 89, 100, 79, 120, 55, 90, 111, 13, 10, 82, 118, 55, 101, 102, 119, 84, 84, 72, 56, 117, 77, 82, 89, 68, 105, 55, 98, 55, 81, 118, 53, 114, 113, 108, 72, 117, 43, 111, 85, 110, 106, 112, 116, 90, 120, 80, 99,
			68, 112, 55, 105, 116, 52, 101, 106, 109, 122, 108, 117, 72, 120, 78, 106, 85, 98, 115, 52, 119, 86, 110, 106, 68, 83, 106, 81, 75, 48, 66, 112, 117, 57, 73, 57, 56, 67, 13, 10, 103, 89, 69, 65, 116, 72, 54, 107, 70, 81, 118, 100, 83, 54,
			78, 86, 57, 53, 48, 68, 66, 50, 112, 103, 80, 53, 53, 57, 68, 104, 117, 112, 108, 71, 65, 113, 70, 43, 85, 88, 98, 69, 79, 56, 104, 86, 117, 115, 104, 112, 106, 57, 67, 116, 100, 104, 84, 89, 53, 48, 121, 106, 53, 116, 115, 69, 76, 75,
			67, 107, 106, 118, 108, 99, 106, 119, 13, 10, 74, 120, 110, 97, 98, 86, 83, 118, 55, 90, 70, 72, 115, 122, 121, 111, 101, 122, 65, 68, 53, 86, 103, 90, 86, 53, 75, 117, 116, 101, 117, 102, 66, 106, 109, 78, 66, 109, 97, 98, 107, 120, 43,
			53, 101, 119, 113, 103, 51, 97, 121, 114, 84, 108, 80, 114, 84, 121, 66, 81, 53, 107, 99, 107, 105, 108, 104, 99, 110, 50, 68, 118, 88, 43, 55, 113, 13, 10, 87, 115, 69, 122, 120, 74, 118, 121, 84, 65, 53, 118, 82, 89, 101, 75, 115, 85,
			112, 56, 80, 53, 69, 67, 103, 89, 65, 85, 121, 99, 116, 87, 67, 70, 107, 90, 79, 56, 121, 101, 65, 65, 111, 71, 115, 76, 52, 80, 55, 48, 116, 110, 105, 117, 74, 53, 51, 98, 54, 108, 82, 110, 105, 75, 52, 51, 72, 108, 98, 97, 51, 118, 68,
			83, 48, 56, 13, 10, 73, 51, 83, 121, 48, 57, 66, 99, 98, 83, 71, 121, 43, 72, 48, 57, 72, 72, 73, 102, 51, 50, 111, 103, 99, 118, 90, 99, 98, 81, 81, 99, 97, 69, 54, 69, 74, 78, 88, 120, 110, 87, 90, 118, 78, 76, 73, 120, 53, 85, 56, 108,
			104, 102, 54, 78, 104, 57, 97, 89, 71, 66, 65, 115, 72, 66, 116, 50, 89, 98, 112, 122, 53, 107, 101, 99, 13, 10, 78, 54, 113, 65, 84, 75, 52, 80, 84, 72, 71, 51, 90, 105, 54, 98, 52, 48, 43, 119, 56, 114, 103, 52, 99, 55, 86, 105, 110,
			98, 103, 121, 69, 107, 90, 120, 106, 98, 104, 121, 102, 72, 84, 100, 81, 81, 75, 66, 103, 67, 50, 79, 79, 78, 47, 82, 86, 53, 75, 103, 100, 90, 83, 77, 119, 121, 86, 112, 102, 72, 66, 76, 80, 100, 75, 51, 13, 10, 88, 69, 105, 84, 113, 57,
			117, 104, 98, 75, 108, 84, 70, 104, 76, 104, 53, 84, 67, 87, 75, 82, 100, 65, 87, 73, 116, 116, 114, 80, 102, 55, 88, 115, 49, 101, 51, 114, 104, 48, 48, 114, 99, 120, 47, 53, 83, 77, 120, 47, 97, 79, 87, 73, 104, 68, 78, 70, 43, 65, 82,
			47, 83, 74, 122, 100, 84, 81, 98, 72, 50, 74, 113, 75, 48, 79, 13, 10, 117, 48, 76, 81, 48, 86, 83, 55, 67, 98, 70, 70, 116, 66, 80, 104, 98, 102, 66, 117, 119, 111, 106, 73, 66, 52, 56, 74, 74, 108, 115, 117, 121, 81, 105, 117, 55, 67,
			109, 98, 73, 65, 50, 103, 109, 89, 49, 108, 68, 120, 81, 98, 85, 99, 74, 100, 116, 79, 117, 119, 52, 78, 100, 83, 71, 89, 114, 102, 13, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 82, 83, 65, 32, 80, 82, 73, 86, 65, 84, 69, 32, 75, 69, 89,
			45, 45, 45, 45, 45 };
	public static final String IP_ADDRESS = "54.154.27.111";
	public static final int PORT = 22;
	
	public Logger log = LoggerFactory.getLogger(VMConfigureTest.class);

	@Test
	public void testGetLinuxDistribution() {
		VMConfig config = new VMConfig();
		ArrayList<String> linuxDist = new ArrayList<>();
		try {
			linuxDist = config.getLinuxDistribution(privateKey, USERNAME, IP_ADDRESS);
		} catch (DockerException e) {
			log.error("Docker Connection Failed", e);
		}
		String dist = linuxDist.get(0);
		Assert.assertTrue("Supported OS", dist.contains(VMConstants.OS_FEDORA) || dist.contains(VMConstants.OS_DEBIAN));
	}

	@Test
	public void testCheckDockerInstallation() {
		VMConfig config = new VMConfig();
		boolean isDockerInstalled = false;
		try {
			isDockerInstalled = config.checkForDocker(privateKey, USERNAME, IP_ADDRESS);
		} catch (DockerException e) {
			log.error("Docker Version Check Failed", e);
		}
		Assert.assertTrue(isDockerInstalled);
	}

	@Test
	public void testCheckDockerService() {
		VMConfig config = new VMConfig();
		boolean isDockerRunning = false;
		try {
			isDockerRunning = config.checkForDocker(privateKey, USERNAME, IP_ADDRESS);
		} catch (DockerException e) {
			log.error("Docker Service Failed to start", e);
		}
		Assert.assertTrue(isDockerRunning);
	}

	@Test
	public void testInstallDocker() {
		VMConfig config = new VMConfig();
		boolean isDockerInstalled = false;
		boolean isTestPassed = true;
		try {
			isDockerInstalled = config.checkForDocker(privateKey, USERNAME, IP_ADDRESS);
			if (!isDockerInstalled) {
				config.installDocker(privateKey, USERNAME, IP_ADDRESS, VMConstants.OS_FEDORA);
			}
		} catch (DockerException e) {
			isTestPassed = false;
			Assert.fail("Docker Installation Failed");
			log.error("Docker Installation Failed", e);
		} finally {
			Assert.assertTrue(isTestPassed);
		}

	}

	@Test
	public void teststartDockerService() {
		VMConfig config = new VMConfig();
		boolean isDockerServiceStart = false;
		boolean isTestPassed = true;
		try {
			isDockerServiceStart = config.checkForDockerService(privateKey, USERNAME, IP_ADDRESS);
			if (!isDockerServiceStart) {
				config.startDockerService(privateKey, USERNAME, IP_ADDRESS);
			}
		} catch (DockerException e) {
			isTestPassed = false;
			Assert.fail("Docker Service Start Failed");
			log.error("Docker Service Start Failed", e);
		} finally {
			Assert.assertTrue(isTestPassed);
		}
	}
}
